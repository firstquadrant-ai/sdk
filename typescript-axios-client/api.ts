/* tslint:disable */
/* eslint-disable */
/**
 * FirstQuadrant API
 * The FirstQuadrant API is used to interact with FirstQuadrant programmatically. We also have SDKs available (coming soon).
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: inquiry@firstquadrant.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface MarkConversationAsWonBody
 */
export interface MarkConversationAsWonBody {
    /**
     * 
     * @type {any}
     * @memberof MarkConversationAsWonBody
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof MarkConversationAsWonBody
     */
    'idempotencyKey': any;
}
/**
 * 
 * @export
 * @interface Success
 */
export interface Success {
    /**
     * 
     * @type {any}
     * @memberof Success
     */
    'success': SuccessSuccessEnum;
}

export const SuccessSuccessEnum = {
    True: 'true'
} as const;

export type SuccessSuccessEnum = typeof SuccessSuccessEnum[keyof typeof SuccessSuccessEnum];

/**
 * 
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * 
     * @type {any}
     * @memberof Team
     */
    'id': any;
    /**
     * 
     * @type {any}
     * @memberof Team
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof Team
     */
    'createdAt': any;
    /**
     * 
     * @type {any}
     * @memberof Team
     */
    'updatedAt': any;
    /**
     * 
     * @type {any}
     * @memberof Team
     */
    'timeZone': any;
}

/**
 * IncomingWebhooksApi - axios parameter creator
 * @export
 */
export const IncomingWebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Mark any open conversations with a particular lead as \"Won\" as a custom goal.
         * @summary Mark conversations as won
         * @param {MarkConversationAsWonBody} markConversationAsWonBody Find conversations using the given email address and create unique goal events based on the idempotency key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomingWebhooksMarkConversationsAsWonPost: async (markConversationAsWonBody: MarkConversationAsWonBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'markConversationAsWonBody' is not null or undefined
            assertParamExists('incomingWebhooksMarkConversationsAsWonPost', 'markConversationAsWonBody', markConversationAsWonBody)
            const localVarPath = `/incoming-webhooks/mark-conversations-as-won`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(markConversationAsWonBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IncomingWebhooksApi - functional programming interface
 * @export
 */
export const IncomingWebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IncomingWebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * Mark any open conversations with a particular lead as \"Won\" as a custom goal.
         * @summary Mark conversations as won
         * @param {MarkConversationAsWonBody} markConversationAsWonBody Find conversations using the given email address and create unique goal events based on the idempotency key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incomingWebhooksMarkConversationsAsWonPost(markConversationAsWonBody: MarkConversationAsWonBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incomingWebhooksMarkConversationsAsWonPost(markConversationAsWonBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IncomingWebhooksApi - factory interface
 * @export
 */
export const IncomingWebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IncomingWebhooksApiFp(configuration)
    return {
        /**
         * Mark any open conversations with a particular lead as \"Won\" as a custom goal.
         * @summary Mark conversations as won
         * @param {MarkConversationAsWonBody} markConversationAsWonBody Find conversations using the given email address and create unique goal events based on the idempotency key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomingWebhooksMarkConversationsAsWonPost(markConversationAsWonBody: MarkConversationAsWonBody, options?: any): AxiosPromise<Success> {
            return localVarFp.incomingWebhooksMarkConversationsAsWonPost(markConversationAsWonBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IncomingWebhooksApi - object-oriented interface
 * @export
 * @class IncomingWebhooksApi
 * @extends {BaseAPI}
 */
export class IncomingWebhooksApi extends BaseAPI {
    /**
     * Mark any open conversations with a particular lead as \"Won\" as a custom goal.
     * @summary Mark conversations as won
     * @param {MarkConversationAsWonBody} markConversationAsWonBody Find conversations using the given email address and create unique goal events based on the idempotency key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncomingWebhooksApi
     */
    public incomingWebhooksMarkConversationsAsWonPost(markConversationAsWonBody: MarkConversationAsWonBody, options?: AxiosRequestConfig) {
        return IncomingWebhooksApiFp(this.configuration).incomingWebhooksMarkConversationsAsWonPost(markConversationAsWonBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the team associated with the API key.
         * @summary Get team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsMeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the team associated with the API key.
         * @summary Get team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsMeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsMeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * Get the team associated with the API key.
         * @summary Get team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsMeGet(options?: any): AxiosPromise<Team> {
            return localVarFp.teamsMeGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
    /**
     * Get the team associated with the API key.
     * @summary Get team
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsMeGet(options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).teamsMeGet(options).then((request) => request(this.axios, this.basePath));
    }
}


