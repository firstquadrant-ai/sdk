/* tslint:disable */
/* eslint-disable */
/**
 * FirstQuadrant API
 * The FirstQuadrant API is used to interact with FirstQuadrant programmatically. We also have SDKs available (coming soon).
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: inquiry@firstquadrant.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MarkConversationAsWonBody,
  Success,
} from '../models';
import {
    MarkConversationAsWonBodyFromJSON,
    MarkConversationAsWonBodyToJSON,
    SuccessFromJSON,
    SuccessToJSON,
} from '../models';

export interface IncomingWebhooksMarkConversationsAsWonPostRequest {
    markConversationAsWonBody: MarkConversationAsWonBody;
}

/**
 * 
 */
export class IncomingWebhooksApi extends runtime.BaseAPI {

    /**
     * Mark any open conversations with a particular lead as \"Won\" as a custom goal.
     * Mark conversations as won
     */
    async incomingWebhooksMarkConversationsAsWonPostRaw(requestParameters: IncomingWebhooksMarkConversationsAsWonPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        if (requestParameters.markConversationAsWonBody === null || requestParameters.markConversationAsWonBody === undefined) {
            throw new runtime.RequiredError('markConversationAsWonBody','Required parameter requestParameters.markConversationAsWonBody was null or undefined when calling incomingWebhooksMarkConversationsAsWonPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/incoming-webhooks/mark-conversations-as-won`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MarkConversationAsWonBodyToJSON(requestParameters.markConversationAsWonBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Mark any open conversations with a particular lead as \"Won\" as a custom goal.
     * Mark conversations as won
     */
    async incomingWebhooksMarkConversationsAsWonPost(requestParameters: IncomingWebhooksMarkConversationsAsWonPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.incomingWebhooksMarkConversationsAsWonPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
